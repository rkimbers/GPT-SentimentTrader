name: Deploy to Amazon ECS

on:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  deploy:
    name: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11.4

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set container time zone to New York
      run: |
        echo "TZ=America/New_York" >> $GITHUB_OUTPUT

#    - name: Add app to PYTHONPATH
#      run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/app" >> $GITHUB_OUTPUT

#    - name: Run tests
#      env:
#        APCA_API_KEY_ID: ${{ secrets.APCA_API_KEY_ID }}
#        ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}
#      run: |
#        python -m unittest discover -p "test_*.py" -v

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
      run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          export AWS_REGION=${{ secrets.AWS_REGION }}
          export AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID}}
          AWS_LOGIN=$(aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com)
          docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/gpt-sentimenttrader:${{ github.sha }}
          docker stop gpt-sentimenttrader || true
          docker rm gpt-sentimenttrader || true
          docker run --env-file /home/ubuntu/.env -d -p 8080:80 --name gpt-sentimenttrader -v logs-volume:/app/logs -v articles-db:/app/articles $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/gpt-sentimenttrader:${{ github.sha }}
          # Remove all images not currently in use
          docker system prune -a
